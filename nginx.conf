worker_processes 1;
error_log /data/logs/error.log debug;
error_log /data/logs/error.log notice;
error_log /data/logs/error.log info;
pid /data/logs/nginx.pid;

events {
  worker_connections 1024;
  # max value 16384, nginx recycling connections+registry optimization =
  #   this.value * 20 = max concurrent connections currently tested with one worker
  #   C1000K should be possible depending there is enough ram/cpu power
  multi_accept on;
}

# https://github.com/arut/nginx-rtmp-module/wiki/Directives
rtmp {
  server {
    listen 1935;
    # chunk_size 8192; # default 4096
    publish_time_fix off;
    allow play all;

    #creates our "live" full-resolution DASH videostream from our incoming encoder stream and tells where to put the DASH video manifest and video fragments
    application dash {
      allow play all;
      live on;
      #record all;
      record off;
      record_path videos;
      record_unique on;
      #allow publish <your_sender_ip_here>;
      allow publish all;
      #allow publish 127.0.0.1;
      deny publish all;
      meta copy;
      wait_key on;
      wait_video on;
      idle_streams off;

      # Dash settings and pushing towards repeaters
      dash on;
      dash_nested on;
      dash_path /data/stream/dash;
      dash_fragment 3;
      dash_playlist_length 20;
      dash_cleanup on;

      # dash_clock_compensation http_head;
      # dash_clock_helper_uri https://<your_server_domain_here>/time;

      # dash_variant _low   bandwidth="500000"  width="640"  height="360";
      # dash_variant _med  bandwidth="1500000" width="1280"  height="720";
      # dash_variant _high bandwidth="5000000" width="1920" height="1080" max;
      
      # it goes to generate a HLS streaming
      # push rtmp://localhost/hls/hls;
      # push rtmp://localhost/hls;

      # exec_push ffmpeg -i rtmp://localhost/dash/$name
      #   -vcodec libx264 -vprofile baseline -g 10 -s
      #   1280x720 -acodec aac -ar 44100 -ac 1
      #   -f flv rtmp://localhost/hls/$name 2>>/var/log/ffmpeg-$name.log;
      # exec_push ffmpeg -i rtmp://localhost/dash/$name
      #         -c:a aac -b:a 32k  -c:v libx264 -b:v 128K -f flv rtmp://localhost/hls/$name_low
      #         -c:a aac -b:a 64k  -c:v libx264 -b:v 256k -f flv rtmp://localhost/hls/$name_mid
      #         -c:a aac -b:a 128k -c:v libx264 -b:v 512K -f flv rtmp://localhost/hls/$name_hi;
    }

    application hls {
      # I despise iOS devices!
      live on;
      hls on;
      hls_path /data/stream/hls;
      hls_nested on;
      hls_fragment 8s;
      hls_playlist_length 24s;
      # hls_fragment 5s;
      # hls_playlist_length 20s;
      # hls_fragment 1s;
      # hls_buffers 10 10m;
      # hls_mp4_buffer_size 1m;
      # hls_mp4_max_buffer_size 5m;
      hls_variant _low BANDWIDTH=500000;
      hls_variant _med BANDWIDTH=1500000;
      hls_variant _high BANDWIDTH=5000000;
    }
  }
}

http {
  include mime.types;
  default_type application/octet-stream;
  sendfile off;
  keepalive_timeout 65;

  server {
    listen 8888;
    #server_name home;

    #creates the http-location for HLS stream - "http://localhost:8888/hls/live/index.m3u8"
    location /hls {
      types {
        application/vnd.apple.mpegurl m3u8;
        video/mp2t ts;
      }
      #alias HLS/live;
      root /data/stream;
      add_header Cache-Control no-cache;
      add_header Access-Control-Allow-Origin *;
    }
    #creates the http-location for DASH stream - "http://localhost:8888/dash/live/index.mpd"
    location /dash {
      root /data/stream;
      add_header Cache-Control no-cache;
      add_header Access-Control-Allow-Origin *;
    }

    #allows us to host some webpages which can show our videos: "http://localhost:8888/index.html"
    location / {
      expires -1;
      root /data/html;
      index index.html index.htm;
    }

    location /audio {
      types {
        application/vnd.apple.mpegurl m3u8;
        video/mp2t ts;
      }
      root /data/stream;
      add_header Cache-Control no-cache;
      add_header Access-Control-Allow-Origin *;
    }

  }
}